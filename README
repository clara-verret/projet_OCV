# Insurance contract optimization

This project is aimed at optimizing the profit of an insurance company by determining the best segmentation of risk (represented by probability θ) and indemnity amounts (denoted R). 
The problem is approached for various cases — one contract, two contracts, and N contracts.

The goal is to maximize the profit by adjusting the risk probability thresholds and indemnity amounts for each contract, considering different risk segments and their associated costs.

## Project structure
The project consists of several modules to handle different numbers of contracts:
- `one_contract.py`: Solves the problem for a single insurance contract.
- `two_contracts.py`: Solves the problem for two insurance contracts.
- `N_contracts.py`: Solves the problem for N insurance contracts, where N is a user-specified number.
- `config.py`: Contains parameters used throughout the project like a, b, L, lambda_, R_min, R_max, and others.
- Plots are saved in the `plots/` directory.
- Logs are written to the `logs` directory, which is automatically created when running `N_contract.py`. The logging verbosity can be configured using the --loglevel option (see Usage below).

Remark : Although `two_contracts.py`  is structurally very similar to `N_contracts.py`, it is kept as a standalone module to illustrate the intermediate steps of scaling from one to multiple contracts.

Remark : For N = 6, the full optimization completes in ~4 seconds on a standard machine.

Remark : When N=7, the optimization does not converge successfully because the \theta parameters violate the ascending order constraint.

## Installation
### Prerequisites
- Python 3.8+
- `pip` installed

### Steps
1. Clone the repository:
```sh
git clone https://github.com/clara-verret/projet_OCV.git
cd projet_OCV
```

2. Install dependencies :
```sh
pip install -r requirements.txt
```

3. Check that the project is working correctly, run:
```sh
python3 main.py one_contract_problem
```

## Usage

### To run the case with one contract

Run the main script:
```sh
python3 main.py one_contract_problem
```
### To run the case with two contracts
Run the main script:
```sh
python3 main.py two_contracts_problem
```

### To run the case with N contracts
Run the main script (example with N=3):
```sh
python3 main.py N_contracts_problem --N 3
```

### To run the case of continuous contract
Run the main script (example with N=3):
```sh
python3 main.py continuous_contract_problem
```

### To change the log level
Logging is implemented for `N_contracts.py` and defaults to INFO. To change the level (e.g., to WARNING, DEBUG, etc.):
```sh
python3 main.py N_contracts_problem --N 3 --loglevel WARNING
```
